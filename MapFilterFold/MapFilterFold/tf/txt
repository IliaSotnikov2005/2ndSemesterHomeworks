namespace MapFilterFoldTests;

using FunctionsSpace;
using NUnit.Framework;

public class Tests
{
    [Test]
    public void Map_AppliesFunctionToEachItemInList_ReturnsNewListWithResults()
    {
        var source = new List<int> { 1, 2, 3 };
        var function = new Func<int, int>(x => x * 2);

        var result = Functions.Map(source, function);

        Assert.Equals(new List<int> { 2, 4, 6 }, result);
    }

    [Test]
    public void Filter_WithPredicateThatAlwaysReturnsTrue_ReturnsAllItems()
    {
        var source = new List<int> { 1, 2, 3, 4, 5 };
        var predicate = new Func<int, bool>(x => true);

        var result = Functions.Filter(source, predicate);

        Assert.Equals(source, result);
    }

    [Test]
    public void Filter_WithPredicateThatAlwaysReturnsFalse_ReturnsNoItems()
    {
        var source = new List<int> { 1, 2, 3, 4, 5 };
        var predicate = new Func<int, bool>(x => false);

        var result = Functions.Filter(source, predicate);

        Assert.That(result.Count, Is.EqualTo(0));
    }

    [Test]
    public void Filter_WithPredicateThatFiltersSomeItems_ReturnsOnlyFilteredItems()
    {
        var source = new List<int> { 1, 2, 3, 4, 5 };
        var predicate = new Func<int, bool>(x => x % 2 == 0);

        var result = Functions.Filter(source, predicate);

        Assert.Equals(new List<int> { 2, 4 }, result);
    }

    [Test]
    public void Map_Applies_Function_To_Each_Item_In_The_List()
    {
        var source = new List<int> { 1, 2, 3 };
        Func<int, int> function = new Func<int, int>(x => x * 2);

        var result = Functions.Map(source, function);

        Assert.Equals(new List<int> { 2, 4, 6 }, result);
    }
}